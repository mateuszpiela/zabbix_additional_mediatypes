zabbix_export:
  version: '6.4'
  media_types:
    -
      name: Gotify
      type: WEBHOOK
      parameters:
        -
          name: Event_nseverity
          value: '{EVENT.NSEVERITY}'
        -
          name: Message
          value: '{ALERT.MESSAGE}'
        -
          name: Subject
          value: '{ALERT.SUBJECT}'
        -
          name: Token
          value: '{ALERT.SENDTO}'
        -
          name: Url
          value: 'YOUR_GOTIFY_URL'
        -
          name: Zabbix_url
          value: '{$ZABBIX.URL}'
      script: |
        var Gotify = {
            url: null,
            token: null,
            message: null,
            subject: null,
            zabbix_url: null,
            severity: null,
        
            sendMessage: function () {
                var params = {
                    extras: {
                          "client::notification": {
                               "click": { "url": Gotify.zabbix_url }
                           }
                    },
                    title: Gotify.subject,
                    message: Gotify.message,
                    priority: Gotify.severity
                },
                data,
                response,
                request = new HttpRequest(),
                url = Gotify.url + '/message?token=' + Gotify.token;
        
                request.addHeader('Content-Type: application/json');
                data = JSON.stringify(params);
        
                Zabbix.log(4, '[Gotify Webhook] URL: ' + url.replace(Gotify.token, '<TOKEN>'));
                Zabbix.log(4, '[Gotify Webhook] params: ' + data);
                response = request.post(url, data);
                Zabbix.log(4, '[Gotify Webhook] HTTP code: ' + request.getStatus());
        
                 
                if (request.getStatus() !== 200) {
                    try {
                      response = JSON.parse(response);
                    } catch (e) {
                      throw 'Unknown error. Check debug log for more information.';
                    }
                    
                    throw response.errorDescription;
                }
            }
        };
        
        try {
            var params = JSON.parse(value);
        
            if (typeof params.Token === 'undefined') {
                throw 'Incorrect value is given for parameter "Token": parameter is missing';
            }
        
            Gotify.token = params.Token;
            Gotify.url = params.Url;
            Gotify.zabbix_url = params.Zabbix_url;
            Gotify.subject = params.Subject; 
            Gotify.message = params.Message;
            Gotify.severity = parseInt(params.Event_nseverity);
        
            Gotify.sendMessage();
        
            return 'OK';
        }
        catch (error) {
            Zabbix.log(4, '[Gotify Webhook] notification failed: ' + error);
            throw 'Sending failed: ' + error + '.';
        }
      message_templates:
        -
          event_source: TRIGGERS
          operation_mode: PROBLEM
          subject: 'Problem: {EVENT.NAME}'
          message: |
            Problem started at {EVENT.TIME} on {EVENT.DATE}
            Problem name: {EVENT.NAME}
            Host: {HOST.NAME}
            Severity: {EVENT.SEVERITY}
            Operational data: {EVENT.OPDATA}
            Original problem ID: {EVENT.ID}
            {TRIGGER.URL}
        -
          event_source: TRIGGERS
          operation_mode: RECOVERY
          subject: 'Resolved in {EVENT.DURATION}: {EVENT.NAME}'
          message: |
            Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}
            Problem name: {EVENT.NAME}
            Problem duration: {EVENT.DURATION}
            Host: {HOST.NAME}
            Severity: {EVENT.SEVERITY}
            Original problem ID: {EVENT.ID}
            {TRIGGER.URL}
        -
          event_source: TRIGGERS
          operation_mode: UPDATE
          subject: 'Updated problem in {EVENT.AGE}: {EVENT.NAME}'
          message: |
            {USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.
            {EVENT.UPDATE.MESSAGE}
            
            Current problem status is {EVENT.STATUS}, age is {EVENT.AGE}, acknowledged: {EVENT.ACK.STATUS}.
        -
          event_source: DISCOVERY
          operation_mode: PROBLEM
          subject: 'Discovery: {DISCOVERY.DEVICE.STATUS} {DISCOVERY.DEVICE.IPADDRESS}'
          message: |
            Discovery rule: {DISCOVERY.RULE.NAME}
            
            Device IP: {DISCOVERY.DEVICE.IPADDRESS}
            Device DNS: {DISCOVERY.DEVICE.DNS}
            Device status: {DISCOVERY.DEVICE.STATUS}
            Device uptime: {DISCOVERY.DEVICE.UPTIME}
            
            Device service name: {DISCOVERY.SERVICE.NAME}
            Device service port: {DISCOVERY.SERVICE.PORT}
            Device service status: {DISCOVERY.SERVICE.STATUS}
            Device service uptime: {DISCOVERY.SERVICE.UPTIME}
        -
          event_source: AUTOREGISTRATION
          operation_mode: PROBLEM
          subject: 'Autoregistration: {HOST.HOST}'
          message: |
            Host name: {HOST.HOST}
            Host IP: {HOST.IP}
            Agent port: {HOST.PORT}
        -
          event_source: SERVICE
          operation_mode: PROBLEM
          subject: 'Service "{SERVICE.NAME}" problem: {EVENT.NAME}'
          message: |
            Service problem started at {EVENT.TIME} on {EVENT.DATE}
            Service problem name: {EVENT.NAME}
            Service: {SERVICE.NAME}
            Severity: {EVENT.SEVERITY}
            Original problem ID: {EVENT.ID}
            Service description: {SERVICE.DESCRIPTION}
            
            {SERVICE.ROOTCAUSE}
        -
          event_source: SERVICE
          operation_mode: RECOVERY
          subject: 'Service "{SERVICE.NAME}" resolved in {EVENT.DURATION}: {EVENT.NAME}'
          message: |
            Service "{SERVICE.NAME}" has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}
            Problem name: {EVENT.NAME}
            Problem duration: {EVENT.DURATION}
            Severity: {EVENT.SEVERITY}
            Original problem ID: {EVENT.ID}
            Service description: {SERVICE.DESCRIPTION}
        -
          event_source: SERVICE
          operation_mode: UPDATE
          subject: 'Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} in {EVENT.AGE}'
          message: |
            Changed "{SERVICE.NAME}" service status to {EVENT.UPDATE.SEVERITY} at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.
            Current problem age is {EVENT.AGE}.
            Service description: {SERVICE.DESCRIPTION}
            
            {SERVICE.ROOTCAUSE}
